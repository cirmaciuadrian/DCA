@page "/"
@using Binance.Net.Clients

@inject ICalculatorService CalculatorService;
@inject ISnackbar Snackbar;
@inject BinanceWebSocketClient BinanceWebSocketClient
<PageTitle>DCA Calculator</PageTitle>

<MudGrid>
    <MudItem md="12">
        <MudPaper Class="pa-4" Elevation="3">
            <h2 class="mb-1">Add investment</h2>
            <MudGrid class="pt-1">
                <MudItem md="6">
                    <MudSelect AdornmentIcon="@Icons.Material.Filled.CurrencyBitcoin" Label="Select your coin"
                               AnchorOrigin="Origin.BottomCenter" AdornmentColor="Color.Primary"
                               @bind-Value="_investmentSelectedCoin" Variant="Variant.Outlined"
                               HelperText="@InvestmentCoinPriceHelperText" FullWidth="true" Clearable>
                        @foreach (var coin in _topCoins)
                        {
                            <MudSelectItem Value="@coin">@coin.Name (@coin.Symbol)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="6">
                    <MudTooltip Text="You can add multiple dates">
                        <MudDatePicker @bind-Date="_selectedInvestmentDate"
                                       FixYear="@_dateInFebruary.Year"
                                       FixMonth="@_dateInFebruary.Month"
                                       PickerMonth="@_dateInFebruary"
                                       Label="Add Days"
                                       DateFormat="dd"
                                       Variant="Variant.Outlined"
                                       PickerClosed="@OnDateAdd" />
                    </MudTooltip>
                    <MudChipSet T="string"
                                AllClosable="@true"
                                SelectionMode="@SelectionMode.MultiSelection"
                                OnClose="@OnDateDelete"
                                Variant="Variant.Outlined">
                        @for (var i = 0; i < _selectedInvestmentDays.Count; i++)
                        {
                            var localIndex = i;
                            <MudChip Value="@_selectedInvestmentDays[localIndex]"
                                     Color="Color.Primary" />
                        }
                    </MudChipSet>
                </MudItem>
                <MudItem md="6">
                    <MudDateRangePicker Label="Select a range" Variant="Variant.Outlined" @bind-DateRange="_selectedInvestmentDateRange"
                                        MaxDate="@DateTime.Now"
                                        MinDate="@_minDateInvestment" />
                </MudItem>
                <MudItem md="4">
                    <MudNumericField @bind-Value="_investmentAmount" Label="€" HelperText="Invested Amount"
                                     AdornmentColor="Color.Primary" Variant="Variant.Outlined"
                                     AdornmentIcon="@Icons.Material.Filled.EuroSymbol" Min="0">
                    </MudNumericField>
                </MudItem>

                <MudItem md="2">
                    <MudButton Class="mt-4" Variant="Variant.Filled" OnClick="AddInvestment" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
                </MudItem>
            </MudGrid>

        </MudPaper>
    </MudItem>
    @if (_isLoading)
    {
        <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay>
    }

    <MudItem md="12">
        <MudPaper Class="pa-4" Elevation="4">
            <MudText Typo="Typo.h6">Historical Data</MudText>
            <MudTable T="InvestmentsResponse" Items="_investments">
                <HeaderContent>
                    <MudTh>Coin</MudTh>
                    <MudTh>From</MudTh>
                    <MudTh>To</MudTh>
                    <MudTh>Days of investment</MudTh>
                    <MudTh>Total invested</MudTh>
                    <MudTh>Unrealized gains</MudTh>
                    <MudTh>Total coins owned</MudTh>
                    <MudTh>Profit</MudTh>
                    <MudTh>ROI</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Coin">@context.Symbol</MudTd>
                    <MudTd DataLabel="From">@context.From.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="To">@context.To.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Days of investment">@context.DaysOfInvestment</MudTd>
                    <MudTd DataLabel="Total invested">@context.TotalFiatInvested.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))</MudTd>
                    <MudTd DataLabel="Unrealized gains">@context.TotalInvestmentPrice.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))</MudTd>
                    <MudTd DataLabel="Total coins owned">@context.TotalCryptoOwned</MudTd>
                    <MudTd DataLabel="Profit">@context.Profit.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))</MudTd>
                    <MudTd DataLabel="ROI">@context.ROI%</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => DeleteInvestment(context.Id)">Delete</MudIconButton>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                </PagerContent>
            </MudTable>

        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    private List<InvestmentsResponse> _investments = new();
    private bool _isLoading = true;
    private List<TopCryptoItem> _topCoins = [];
    TopCryptoItem? _investmentSelectedCoin;
    private readonly List<string> _selectedInvestmentDays = [];
    private DateTime? _selectedInvestmentDate;
    private readonly DateTime _dateInFebruary = new DateTime(2023, 2, 1);
    private readonly DateTime _minDateInvestment = new DateTime(2022, 01, 01);
    private DateRange? _selectedInvestmentDateRange;
    private int? _investmentAmount;
    private string InvestmentCoinPriceHelperText => _investmentSelectedCoin != null
        ? _investmentSelectedCoin.Quote.EUR.Price.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))
        : "Please don't use currencies with more then 3 decimals";

    protected override async Task OnInitializedAsync()
    {
        _investments = await CalculatorService.GetAllInvestmentsAsync();
        _topCoins = (await CalculatorService.GetTop100CurrenciesAsync()).Response.Data;

        await SubscribeToPriceUpdates();
        _isLoading = false;
    }

    private void OnDateAdd()
    {
        if (_selectedInvestmentDate.HasValue && !_selectedInvestmentDays.Contains(_selectedInvestmentDate.Value.ToString("dd")))
            _selectedInvestmentDays.Add(_selectedInvestmentDate.Value.ToString("dd"));
    }

    private void OnDateDelete(MudChip<string> date)
        => _selectedInvestmentDays.Remove(date.Value!);

    private async Task AddInvestment()
    {
        if (!ValidateInvestmentInput()) return;
        IsLoading(true);

        var addInvestmentResponse = await CalculatorService.AddInvestmentAsync(
            new AddInvestmentContract(_investmentSelectedCoin!, _selectedInvestmentDays, _investmentAmount!.Value, _selectedInvestmentDateRange!.Start!.Value, _selectedInvestmentDateRange!.End!.Value)
        );

        if (!addInvestmentResponse.IsSuccess)
        {
            IsLoading(false);
            Snackbar.Add(addInvestmentResponse.ErrorMessage, Severity.Error);
            return;
        }

        _investments = await CalculatorService.GetAllInvestmentsAsync();
        await BinanceWebSocketClient.SubscribeToPriceUpdate(UpdatePriceCallback, _investmentSelectedCoin!.Symbol);

        Snackbar.Add("Investment added successfully", Severity.Success);
        CleanInvestmentForm();
        IsLoading(false);
    }

    private bool ValidateInvestmentInput()
    {
        List<string> errorMessages = [];

        if (_investmentSelectedCoin == null)
            errorMessages.Add("Please select a coin.");

        if (_selectedInvestmentDays.Count == 0)
            errorMessages.Add("Please select the monthly investment days.");

        if (_investmentAmount is null or 0)
            errorMessages.Add("Invalid value for the investment amount.");

        if (_selectedInvestmentDateRange == null)
            errorMessages.Add("Please select a date range.");

        if (errorMessages.Count == 0) return true;

        var errorList = string.Join("", errorMessages.Select(msg => $"<li>{msg}</li>"));
        Snackbar.Add(new MarkupString($"<ul>{errorList}</ul>"), Severity.Error);

        return false;
    }

    private void CleanInvestmentForm()
    {
        _investmentSelectedCoin = null;
        _selectedInvestmentDays.Clear();
        _selectedInvestmentDate = null;
        _selectedInvestmentDateRange = null;
        _investmentAmount = 0;
    }

    private void IsLoading(bool value)
    {
        _isLoading = value;
        StateHasChanged();
    }

    private void UpdatePriceCallback(LivePriceItem newPrice)
        => InvokeAsync(() =>
            {
                _investments.Where(x => x.Symbol == newPrice.Symbol).ToList().ForEach(investment => investment.CoinPrice = newPrice.Price);
                StateHasChanged();
            });

    private async Task SubscribeToPriceUpdates()
    {
        foreach (var investment in _investments)
        {
            await BinanceWebSocketClient.SubscribeToPriceUpdate(UpdatePriceCallback, investment.Symbol);
        }
    }

    private async Task DeleteInvestment(int id)
    {
        IsLoading(true);

        await CalculatorService.DeleteInvestmentAsync(id);
        await BinanceWebSocketClient.UnsubscribeAllAsync();
        _investments.RemoveAll(x => x.Id == id);

        await SubscribeToPriceUpdates();

        Snackbar.Add("Investment was deleted succsefully", Severity.Success);
        IsLoading(false);
    }
}